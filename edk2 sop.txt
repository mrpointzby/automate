EDKII (Extended Firmware Interface Development Kit II)的环境搭建：

Windows:官方文档：[Windows systems · tianocore/tianocore.github.io Wiki](https://github.com/tianocore/tianocore.github.io/wiki/Windows-systems)

1. 所需工具：
   
   VS2019（或更老版本，最新支持到19）；
   
   Python:需要设置安装目录环境变量到path，且需要新建环境变量PYTHON_HOME，值为python的安装目录。记得路径最后是文件夹的记得加上 ' \ '，避免后续 error** ；
   
   IASl：打开网址，下载[iASL Compiler and Windows ACPI Tools (.Zip, 1.3 MB)](https://www.intel.com/content/www/us/en/download/774881/acpi-component-architecture-downloads-windows-binary-tools.html) ，将文件解压放到“C:\ASL”，设置安装目录环境变量到path，记得路径最后是文件夹的记得加上 ' \ '
   
   NASM:[NASM](https://www.nasm.us/)，下载安装，将安装目录添加到path（记得加上 ' \ '）；同时新建环境变量NASM_PREFIX，值为“C:\nasm\”，记得路径最后是文件夹的记得加上 ' \ '
   
   CLANG_BIN:[Release LLVM 16.0.6 · llvm/llvm-project (github.com)](https://github.com/llvm/llvm-project/releases/tag/llvmorg-16.0.6)，下载LLVM，新建环境变量CLANG_BIN，值为“C:\LLVM\bin\”，即包含clang.exe的目录。记得路径最后是文件夹的记得加上 ' \ '
   
   make:可选。如果有Linux就可以直接用Linux上的make。在windows上安装make步骤具体参考[Windows系统安装Cygwin 运行makefile命令_cygwin make命令_KID星心的博客-CSDN博客](https://blog.csdn.net/weixin_43993373/article/details/120949205)。
   
   CYGWIN_HOME：安装[Cygwin Installation](https://www.cygwin.com/install.html)，新建系统变量CYGWIN_HOME，值为“C:\cygwin64\bin\”，记得路径最后是文件夹的记得加上 ' \ '

2. 下载edk2
   
   用Git在同一文件夹下下载：
   
   git clone https://github.com/tianocore/edk2.git
   
   git clone [GitHub - tianocore/edk2-libc: Port of libc to EDK II with applications that depend on libc](https://github.com/tianocore/edk2-libc.git)
   
   得到edk2和edk2-libc两个文件夹
   
   cd edk2
   
   git submodule update --init

3. 编译BaseTools
   e
   打开x86 Native Tools Command Prompt for VS 201X，进入edk2，执行
   
   edksetup.bat Rebuild
   
   编译好的工具在 edk2\BaseTools 文件夹中；

4. 更改 Conf 目录下的 target.txt
   
   target.txt给出了编译时的默认参数，tools_def.txt规定了所使用的编译工具链，搭建环境过程中通常 tools_def.txt 是不需要修改的，主要修改 target.txt文件；如下：
   
   > TARGET_ARCH = X64 #默认是IA32 ，表示程序运行的目标架构 这里根据自己需要修改
   > 
   > TOOL_CHAIN_TAG = VS2019 #默认可能是其他值，这里我改成了 VS2019，表示使用的编译工具链是 VS2019，具体可以选择哪些工具，可以看 tools_def.txt 文件中的定义；
   
   如果有其他需求可自行修改其他参数；

5. 编译模拟器/MdeModule/Ovmf……（edk2下面还有很多包）
   
   修改..\edk2\Conf\target.txt,
   
   确保：
   
   ACTIVE_PLATFORM       = EmulatorPkg/EmulatorPkg.dsc
   
   (ACTIVE_PLATFORM      = MdeModulePkg/MdeModulePkg.dsc,
   
   ACTIVE_PLATFORM       = OvmfPkg/OvmfPkgX64.dsc <--我选的这个
   
   ……)
   
   TARGET_ARCH           = X64(按需更改为IA32等，详见edk2\Conf\tools_def.txt)
   
   TOOL_CHAIN_TAG        = VS2019(按需更改为VS2015x86等，详见edk2\Conf\tools_def.txt)
然后edksetup.bat rebuild
然后 edksetup.bat
然后build 
不行换成x64 native tools command prompt for VS 2019
然后重新 edksetup.bat reconfig
   编译好的文件在edk2\Build\EmulatorX64(edk2\Build\EmulatorIA32,edk2\Build\MdeModule,edk2\Build\OvmfX64……
   
   )下
   
   

6. 此时在 edk2\Build\EmulatorX64 文件夹中就存在了模拟器的启动文件，执行它就可以打开模拟器，出现启动界面，命令如下：
   
   > cd Build\EmulatorX64\DEBUG_VS2019\X64\ && WinHost.exe

        在 x86 Native Tools Command Prompt for VS 201X中运行以上代码启动模拟器

        也可直接双击WinHost.exe运行

        注：若运行WinHost.exe出现的GOP Window窗口无法键入或拖动，将微软拼音输入法兼容性打开，并切换英文输入法即可

7. 在模拟器中运行.efi
   
   在上一步GOP Window中键入FS0: 即可进入WinHost.exe所在目录，再次键入helloworld.efi即可在屏幕上打印UEFI Hello World!

8. 在qemu中执行link
https://blog.csdn.net/qq_40945626/article/details/121460583?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522169865481716800227484493%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&request_id=169865481716800227484493&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-2-121460583-null-null.142%5Ev96%5Epc_search_result_base4&utm_term=%E5%9C%A8edk%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BAqemu&spm=1018.2226.3001.4187
